-- TRIGGER TO ENSURE THAT EMPLOYERS DON'T HAVE DUPLICATING JOB CATEGORIES,
-- NOR THERE CAN BE DUPLICATES AMONG CATEGORIES ACCESSIBLE TO ANY EMPLOYER
DROP TRIGGER IF EXISTS UNIQUE_JOB_CATEGORY;
DELIMITER $$
CREATE TRIGGER UNIQUE_JOB_CATEGORY
	BEFORE INSERT ON GXC55311.Z_JOB_CATEGORIES
	FOR EACH ROW
		BEGIN
			DECLARE RES INT DEFAULT 0;
			IF NEW.JOB_CATEGORY_EMPLOYER_ID IS NULL THEN
				SET RES = (SELECT COUNT(JOB_CATEGORY_ID)
							FROM GXC55311.Z_JOB_CATEGORIES
							WHERE JOB_CATEGORY_NAME = NEW.JOB_CATEGORY_NAME AND
							JOB_CATEGORY_EMPLOYER_ID IS NULL);
				IF RES >= 1 THEN
        			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'DUPLICATE GENERAL CATEGORIES NOT ALLOWED!';
				END IF;
			ELSE
				SET RES = (SELECT COUNT(JOB_CATEGORY_ID)
							FROM GXC55311.Z_JOB_CATEGORIES
							WHERE JOB_CATEGORY_NAME = NEW.JOB_CATEGORY_NAME AND
							JOB_CATEGORY_EMPLOYER_ID = NEW.JOB_CATEGORY_EMPLOYER_ID);
				IF RES >= 1 THEN
					SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'DUPLICATE CATEGORIES ARE NOT ALLOWED FOR ONE EMPLOYER!';
				END IF;
			END IF;
		END;$$
DELIMITER ;
​
-- PARHAM: FOR THIS ONE IS NULL FOR THE IF IS NOT NECESSARY
​
-- TRIGGER TO ENSURE THAT ACTIVE EMPLOYERS CAN POST AS MANY JOBS AS THEIR MEMBERSHIP ALLOWS THEM
DROP TRIGGER IF EXISTS EMPLOYER_CATEGORY_CHECK;
DELIMITER $$
CREATE TRIGGER EMPLOYER_CATEGORY_CHECK
	BEFORE INSERT ON GXC55311.Z_JOBS
	FOR EACH ROW
		BEGIN
			DECLARE EMP_STATUS VARCHAR(100);
			DECLARE EMP_CATEGORY VARCHAR(20);
		    DECLARE JOBS_POSTED INT DEFAULT 0;

		   	SET EMP_STATUS = (SELECT USER_STATUS
							FROM GXC55311.Z_USERS
							WHERE USER_ID = NEW.JOB_EMPLOYER_ID);

			IF EMP_STATUS NOT LIKE '%ACTIVE%' THEN
        			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'ONLY ACTIVE MEMBERS CAN POST JOBS!';
        	END IF;

			SET EMP_CATEGORY = (SELECT EMPLOYER_CATEGORY
							FROM GXC55311.Z_EMPLOYERS
							WHERE EMPLOYER_ID = NEW.JOB_EMPLOYER_ID);
			IF EMP_CATEGORY LIKE '%BASIC%' THEN
        		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'BASIC MEMBERS CANNOT POST JOBS!';
        	ELSE
        		SET JOBS_POSTED = (SELECT COUNT(JOB_ID)
								FROM GXC55311.Z_JOBS
								WHERE JOB_EMPLOYER_ID = NEW.JOB_EMPLOYER_ID);
        		IF EMP_CATEGORY LIKE '%PRIME%' AND JOBS_POSTED >= 5 THEN
        			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'PRIME MEMBERS CANNOT POST MORE THAN 5 JOBS!';
        		END IF;
        	END IF;
		END;$$
DELIMITER ;
​
​
-- TRIGGER TO ENSURE THAT ACTIVE CANDIDATES CAN APPLY TO AS MANY JOBS AS THEIR MEMBERSHIP ALLOWS THEM
DROP TRIGGER IF EXISTS CANDIDATE_CATEGORY_CHECK;
DELIMITER $$
CREATE TRIGGER CANDIDATE_CATEGORY_CHECK
	BEFORE INSERT ON GXC55311.Z_APPLICATIONS
	FOR EACH ROW
		BEGIN
			DECLARE CAND_STATUS VARCHAR(100);
			DECLARE CAND_CATEGORY VARCHAR(20);
		    DECLARE JOBS_APPLIED INT DEFAULT 0;

		   	SET CAND_STATUS = (SELECT USER_STATUS
							FROM GXC55311.Z_USERS
							WHERE USER_ID = NEW.APPLICATION_CANDIDATE_ID);

			IF CAND_STATUS NOT LIKE '%ACTIVE%' THEN
        			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'ONLY ACTIVE MEMBERS CAN APPLY TO JOBS!';
        	END IF;

			SET CAND_CATEGORY = (SELECT CANDIDATE_CATEGORY
							FROM GXC55311.Z_CANDIDATES
							WHERE CANDIDATE_ID = NEW.APPLICATION_CANDIDATE_ID);
			IF CAND_CATEGORY LIKE '%BASIC%' THEN
        		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'BASIC MEMBERS CANNOT APPLY TO JOBS!';
        	ELSE
        		SET JOBS_APPLIED = (SELECT COUNT(APPLICATION_JOB_ID)
								FROM GXC55311.Z_APPLICATIONS
								WHERE APPLICATION_CANDIDATE_ID = NEW.APPLICATION_CANDIDATE_ID);
        		IF CAND_CATEGORY LIKE '%PRIME%' AND JOBS_APPLIED >= 5 THEN
        			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'PRIME MEMBERS CANNOT APPLY TO MORE THAN 5 JOBS!';
        		END IF;
        	END IF;
		END;$$
DELIMITER ;
​
​
-- UPDATABLE VIEW TO UPDATE BALANCE OF ACTIVE EMPLOYERS
DROP VIEW IF EXISTS ACTIVE_EMPLOYERS_BALANCE_CATEGORY;
CREATE VIEW ACTIVE_EMPLOYERS_BALANCE_CATEGORY AS
	SELECT EMPLOYER_ID, EMPLOYER_CATEGORY, USER_BALANCE AS EMPLOYER_BALANCE
	FROM GXC55311.Z_USERS, GXC55311.Z_EMPLOYERS
	WHERE USER_ID = EMPLOYER_ID AND USER_STATUS LIKE '%ACTIVE%';
​
​
-- UPDATABLE VIEW TO UPDATE BALANCE OF ACTIVE CANDIDATES
DROP VIEW IF EXISTS ACTIVE_CANDIDATES_BALANCE_CATEGORY;
CREATE VIEW ACTIVE_CANDIDATES_BALANCE_CATEGORY AS
	SELECT CANDIDATE_ID, CANDIDATE_CATEGORY, USER_BALANCE AS CANDIDATE_BALANCE
	FROM GXC55311.Z_USERS, GXC55311.Z_CANDIDATES ZC
	WHERE USER_ID = CANDIDATE_ID AND USER_STATUS LIKE '%ACTIVE%';
​
​
-- EVENT TO DECREASE A BALANCE OF ACTIVE USERS ON A MONTHLY BASIS
SET GLOBAL EVENT_SCHEDULER = ON;
DROP EVENT IF EXISTS CHARGE_ACCOUNTS;
DELIMITER $$
CREATE EVENT
IF NOT EXISTS CHARGE_ACCOUNTS
ON SCHEDULE EVERY 1 MONTH
STARTS '2020-07-01 01:00:00' -- ONE HOUR BONUS
DO
BEGIN
	-- UPDATE EMPLOYER'S BALANCE
	UPDATE GXC55311.ACTIVE_EMPLOYERS_BALANCE_CATEGORY
	SET EMPLOYER_BALANCE = IF (EMPLOYER_CATEGORY LIKE '%PRIME%', EMPLOYER_BALANCE - 50,
	IF (EMPLOYER_CATEGORY LIKE '%GOLD%', EMPLOYER_BALANCE - 100, EMPLOYER_BALANCE))
	WHERE EMPLOYER_BALANCE IS NOT NULL;

	-- UPDATE CANDIDATES'S BALANCE
	UPDATE GXC55311.ACTIVE_CANDIDATES_BALANCE_CATEGORY
	SET CANDIDATE_BALANCE = IF (CANDIDATE_CATEGORY LIKE '%PRIME%', CANDIDATE_BALANCE - 10,
	IF (CANDIDATE_CATEGORY LIKE '%GOLD%', EMPLOYER_BALANCE - 20, CANDIDATE_BALANCE))
	WHERE CANDIDATE_BALANCE IS NOT NULL;
​
END;$$
DELIMITER ;
​
​
-- TRIGGER TO UPDATE USER'S BALANCE AFTER A PAYMENT HAS BEEN MADE
DROP TRIGGER IF EXISTS UPDATE_BALANCE_AFTER_PAYMENT;
DELIMITER $$
CREATE TRIGGER UPDATE_BALANCE_AFTER_PAYMENT
	AFTER INSERT ON GXC55311.Z_PAYMENTS
	FOR EACH ROW
		BEGIN
			DECLARE U_ID INT;

		   	SET U_ID = (SELECT PAYMENT_METHOD_USER_ID
							FROM GXC55311.Z_PAYMENT_METHODS ZPM
							WHERE PAYMENT_METHOD_ID = NEW.PAYMENT_METHOD_ID);

			UPDATE GXC55311.Z_USERS
			SET USER_BALANCE = USER_BALANCE + NEW.PAYMENT_AMOUNT
			WHERE USER_ID = U_ID;

		END;$$
DELIMITER ;
​
​
-- TRIGGER TO UPDATE USER'S STATUS AFTER THEIR BALANCE CHANGES
DROP TRIGGER IF EXISTS UPDATE_STATUS_BASED_ON_BALANCE;
DELIMITER $$
CREATE TRIGGER UPDATE_STATUS_BASED_ON_BALANCE
	BEFORE UPDATE ON GXC55311.Z_USERS
	FOR EACH ROW
		BEGIN
			IF NEW.USER_BALANCE <> OLD.USER_BALANCE THEN
				IF NEW.USER_BALANCE < 0 THEN
					SET NEW.USER_STATUS = 'SUFFERING';
					IF OLD.USER_BALANCE >= 0 THEN
						SET NEW.USER_FROZEN_FROM = CURDATE();
					END IF;
				ELSE
					SET NEW.USER_STATUS = 'ACTIVE';
					SET NEW.USER_FROZEN_FROM = NULL;
				END IF;
			END IF;
		END;$$
DELIMITER ;
​
​
-- IMPOSSIBLE
-- TRIGGER TO ENSURE THAT A USER HAS ONLY ONE DEFAULT PAYMENT METHOD
-- DROP TRIGGER IF EXISTS UNIQUE_DEFAULT_PAYMENT_METHOD;
-- DELIMITER $$
-- CREATE TRIGGER UNIQUE_DEFAULT_PAYMENT_METHOD
-- 	AFTER UPDATE ON GXC55311.Z_PAYMENT_METHODS
-- 	FOR EACH ROW
-- 		BEGIN
-- 			IF NEW.PAYMENT_METHOD_DEFAULT THEN
-- 				UPDATE GXC55311.Z_PAYMENT_METHODS
-- 				SET PAYMENT_METHOD_DEFAULT = FALSE
-- 				WHERE PAYMENT_METHOD_USER_ID = NEW.PAYMENT_METHOD_USER_ID
-- 				AND PAYMENT_METHOD_ID <> NEW.PAYMENT_METHOD_ID;
-- 			END IF;
-- 		END;$$
-- DELIMITER ;
​
​
-- EVENT TO MAKE AUTOMATIC PAYMENTS (IF DEFAULT PAYMENT METHOD IS INDICATED)
SET GLOBAL EVENT_SCHEDULER = ON;
DROP EVENT IF EXISTS AUTOMATIC_PAYMENT;
DELIMITER $$
CREATE EVENT
IF NOT EXISTS AUTOMATIC_PAYMENT
ON SCHEDULE EVERY 1 MONTH
STARTS '2020-07-01 00:00:00' -- MIDNIGHT SHARP
DO
BEGIN
	DECLARE DONE INT DEFAULT FALSE;
	DECLARE AMOUNT DECIMAL(10,2);
	DECLARE PAY_METH_ID INT;
	DECLARE CATEGORY VARCHAR(20);
​
	-- CATEGORY AND DEFAULT PAYMENT METHOD OF ACTIVE EMPLOYERS
	DECLARE EMP_CUR CURSOR FOR
		SELECT EMPLOYER_CATEGORY, PAYMENT_METHOD_ID
		FROM GXC55311.Z_USERS, GXC55311.Z_EMPLOYERS, GXC55311.Z_PAYMENT_METHODS
		WHERE USER_ID = EMPLOYER_ID AND
		USER_ID = PAYMENT_METHOD_USER_ID AND
		USER_STATUS LIKE '%ACTIVE%' AND
		PAYMENT_METHOD_DEFAULT;

	-- CATEGORY AND DEFAULT PAYMENT METHOD OF ACTIVE CANDIDATES
	DECLARE CAND_CUR CURSOR FOR
		SELECT CANDIDATE_CATEGORY, PAYMENT_METHOD_ID
		FROM GXC55311.Z_USERS, GXC55311.Z_CANDIDATES, GXC55311.Z_PAYMENT_METHODS
		WHERE USER_ID = CANDIDATE_ID AND
		USER_ID = PAYMENT_METHOD_USER_ID AND
		USER_STATUS LIKE '%ACTIVE%' AND
		PAYMENT_METHOD_DEFAULT;

	DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE = TRUE;

	OPEN EMP_CUR;
		READ_LOOP: LOOP
			FETCH EMP_CUR INTO CATEGORY, PAY_METH_ID;
			IF DONE THEN
				LEAVE READ_LOOP;
			END IF;

			IF CATEGORY LIKE '%GOLD%' THEN
				SET AMOUNT = 100;
			ELSEIF CATEGORY LIKE '%PRIME%' THEN
				SET AMOUNT = 50;
			ELSE
				ITERATE READ_LOOP;
			END IF;
			INSERT INTO GXC55311.Z_PAYMENTS (PAYMENT_AMOUNT, PAYMENT_DATE, PAYMENT_METHOD_ID)
			VALUES (AMOUNT, CURDATE(), PAY_METH_ID);
		END LOOP;
	CLOSE EMP_CUR;
​
	OPEN CAND_CUR;
		READ_LOOP: LOOP
			FETCH CAND_CUR INTO CATEGORY, PAY_METH_ID;
			IF DONE THEN
				LEAVE READ_LOOP;
			END IF;

			IF CATEGORY LIKE '%GOLD%' THEN
				SET AMOUNT = 20;
			ELSEIF CATEGORY LIKE '%PRIME%' THEN
				SET AMOUNT = 10;
			ELSE
				ITERATE READ_LOOP;
			END IF;
			INSERT INTO GXC55311.Z_PAYMENTS (PAYMENT_AMOUNT, PAYMENT_DATE, PAYMENT_METHOD_ID)
			VALUES (AMOUNT, CURDATE(), PAY_METH_ID);
		END LOOP;
	CLOSE CAND_CUR;
​
END;$$
DELIMITER ;
​
​
-- EVENT TO DEACTIVATE USERS SUFFERING FOR A YEAR
SET GLOBAL EVENT_SCHEDULER = ON;
DROP EVENT IF EXISTS DEACTIVATE_SUFFERING_FOR_YEAR;
DELIMITER $$
CREATE EVENT
IF NOT EXISTS DEACTIVATE_SUFFERING_FOR_YEAR
ON SCHEDULE EVERY 1 DAY
STARTS '2020-07-01 23:00:00'
DO
BEGIN
	UPDATE GXC55311.Z_USERS
	SET USER_STATUS = 'DEACTIVE'
	WHERE TIMESTAMPDIFF (YEAR, USER_FROZEN_FROM, NOW() ) >= 1;
​
END;$$
DELIMITER ;